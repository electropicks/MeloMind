datasource db {
  provider = "postgresql"
  url      = env("SUPABASE_SESSION_CONNECTION_STRING")
}

generator client {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
}

model Song {
  spotify_id   String   @id
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  title        String
  artist       String
  album        String
  genre_tag    String
  release_year Int
}

model SpotifyTrack {
  id               String          @id
  name             String
  album            SpotifyAlbum    @relation(fields: [albumId], references: [id])
  albumId          String
  artists          SpotifyArtist[] @relation("TrackArtists")
  availableMarkets String[]
  discNumber       Int
  durationMs       Int
  explicit         Boolean
  isPlayable       Boolean         @default(true)
  isLocal          Boolean         @default(false)
  popularity       Int
  previewUrl       String?
  trackNumber      Int
  type             String          @default("track")
  uri              String
  externalUrls     Json
  externalIds      Json
}

model SpotifyAlbum {
  id                   String               @id
  name                 String
  albumType            String
  totalTracks          Int
  availableMarkets     String[]
  externalUrls         Json
  href                 String
  images               SpotifyImageObject[]
  releaseDate          String
  releaseDatePrecision String
  restrictions         Json?
  type                 String               @default("album")
  uri                  String
  artists              SpotifyArtist[]      @relation("AlbumArtists")
  tracks               SpotifyTrack[]
}

model SpotifyArtist {
  id           String               @id
  name         String
  type         String               @default("artist")
  uri          String
  externalUrls Json
  href         String
  followers    Json?
  genres       String[]
  images       SpotifyImageObject[]
  popularity   Int
  albums       SpotifyAlbum[]       @relation("AlbumArtists")
  tracks       SpotifyTrack[]       @relation("TrackArtists")
}

model SpotifyImageObject {
  id       String         @id @default(uuid())
  url      String
  height   Int?
  width    Int?
  albumId  String?
  album    SpotifyAlbum?  @relation(fields: [albumId], references: [id])
  Artist   SpotifyArtist? @relation(fields: [artistId], references: [id])
  artistId String?
}

model SpotifyTrackAudioFeatures {
  id               String @id
  acousticness     Float
  danceability     Float
  durationMs       Int
  energy           Float
  instrumentalness Float
  key              Int
  liveness         Float
  loudness         Float
  mode             Int
  speechiness      Float
  tempo            Float
  timeSignature    Int
  trackHref        String
  valence          Float
  type             String
  uri              String
}

model SpotifyTrackAudioAnalysis {
  id                      String    @id
  numSamples              Int
  duration                Float
  sampleMd5               String
  offsetSeconds           Int
  windowSeconds           Int
  analysisSampleRate      Int
  analysisChannels        Int
  endOfFadeIn             Float
  startOfFadeOut          Float
  loudness                Float
  tempo                   Float
  tempoConfidence         Float
  timeSignature           Int
  timeSignatureConfidence Float
  key                     Int
  keyConfidence           Float
  mode                    Int
  modeConfidence          Float
  segments                Segment[]
  tatums                  Tatum[]
  beats                   Beat[]
  bars                    Bar[]
  sections                Section[]
}

model Segment {
  id              String                    @id @default(uuid())
  trackAnalysis   SpotifyTrackAudioAnalysis @relation(fields: [analysisId], references: [id])
  analysisId      String
  start           Float
  duration        Float
  confidence      Float
  loudnessStart   Float
  loudnessMax     Float
  loudnessMaxTime Float
  loudnessEnd     Float?
  pitches         String
  timbre          String
}

model Tatum {
  id            String                    @id @default(uuid())
  trackAnalysis SpotifyTrackAudioAnalysis @relation(fields: [analysisId], references: [id])
  analysisId    String
  start         Float
  duration      Float
  confidence    Float
}

model Beat {
  id            String                    @id @default(uuid())
  trackAnalysis SpotifyTrackAudioAnalysis @relation(fields: [analysisId], references: [id])
  analysisId    String
  start         Float
  duration      Float
  confidence    Float
}

model Bar {
  id            String                    @id @default(uuid())
  trackAnalysis SpotifyTrackAudioAnalysis @relation(fields: [analysisId], references: [id])
  analysisId    String
  start         Float
  duration      Float
  confidence    Float
}

model Section {
  id                      String                    @id @default(uuid())
  trackAnalysis           SpotifyTrackAudioAnalysis @relation(fields: [analysisId], references: [id])
  analysisId              String
  start                   Float
  duration                Float
  confidence              Float
  loudness                Float
  tempo                   Float
  tempoConfidence         Float
  key                     Int
  keyConfidence           Float
  mode                    Int
  modeConfidence          Float
  timeSignature           Int
  timeSignatureConfidence Float
}
